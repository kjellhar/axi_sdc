----------------------------------------------------------------------------------
-- Company: 
-- Engineer: 
-- 
-- Create Date: 04/23/2014 04:11:50 AM
-- Design Name: 
-- Module Name: sdc_crc7 - rtl
-- Project Name: 
-- Target Devices: 
-- Tool Versions: 
-- Description: 
-- 
-- Dependencies: 
-- 
-- Revision:
-- Revision 0.01 - File Created
-- Additional Comments:
--  
-- The design is based on the code generated by OuputLogic. The code is 
-- slightly adapted.
--
-------------------------------------------------------------------------------
-- Copyright (C) 2009 OutputLogic.com 
-- This source file may be used and distributed without restriction 
-- provided that this copyright statement is not removed from the file 
-- and that any derivative work contains the original copyright notice 
-- and the associated disclaimer. 
-- 
-- THIS SOURCE FILE IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS 
-- OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED	
-- WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE. 
-------------------------------------------------------------------------------
-- CRC module for data(0:0)
--   lfsr(6:0)=1+x^3+x^7;
-------------------------------------------------------------------------------
----------------------------------------------------------------------------------


library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

-- Uncomment the following library declaration if using
-- arithmetic functions with Signed or Unsigned values
--use IEEE.NUMERIC_STD.ALL;

-- Uncomment the following library declaration if instantiating
-- any Xilinx leaf cells in this code.
--library UNISIM;
--use UNISIM.VComponents.all;

entity sdc_crc7 is
    Port ( Clk : in std_logic;
           Enable : in std_logic;
           Clr : in std_logic;
           SData_in : in std_logic;
           Crc7_out : out std_logic_vector (6 downto 0));
end sdc_crc7;

architecture rtl of sdc_crc7 is

  signal lfsr_q: std_logic_vector (6 downto 0);	
  signal lfsr_c: std_logic_vector (6 downto 0);	
begin	
    Crc7_out <= lfsr_q;

    lfsr_c(0) <= lfsr_q(6) xor SData_in;
    lfsr_c(1) <= lfsr_q(0);
    lfsr_c(2) <= lfsr_q(1);
    lfsr_c(3) <= lfsr_q(2) xor lfsr_q(6) xor SData_in;
    lfsr_c(4) <= lfsr_q(3);
    lfsr_c(5) <= lfsr_q(4);
    lfsr_c(6) <= lfsr_q(5);


    process (Clk) 
    begin 
        if rising_edge(Clk) then
            if Clr = '1' then
                lfsr_q <= (others => '0');
            else
                if Enable = '1' then
                    lfsr_q <= lfsr_c; 
       	        end if; 
            end if;
        end if; 
    end process; 
end rtl;
