/*
 * Copyright (c) 2009-2012 Xilinx, Inc.  All rights reserved.
 *
 * Xilinx, Inc.
 * XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" AS A
 * COURTESY TO YOU.  BY PROVIDING THIS DESIGN, CODE, OR INFORMATION AS
 * ONE POSSIBLE   IMPLEMENTATION OF THIS FEATURE, APPLICATION OR
 * STANDARD, XILINX IS MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION
 * IS FREE FROM ANY CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE
 * FOR OBTAINING ANY RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.
 * XILINX EXPRESSLY DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO
 * THE ADEQUACY OF THE IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO
 * ANY WARRANTIES OR REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE
 * FROM CLAIMS OF INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE.
 *
 */

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include "platform.h"
#include "xil_io.h"

#define CTRL1	0x44a00000
#define CTRL2	0x44a00004
#define CARG	0x44a00008
#define CMD		0x44a0000C
#define R0		0x44a00010
#define R1		0x44a00014
#define R2		0x44a00018
#define R3		0x44a0001C

void print(char *str);

int main()
{
	int val0;
	int val1;
	int val2;
	int val3;

	int i,j;

    init_platform();

    print("Hello World\n\r");

    Xil_Out32(CTRL1, 0x007C0001);
    Xil_Out32(CTRL2, 0x00000000);
    Xil_Out32(CARG, 0x00000000);
    Xil_Out32(CMD, 0x00000000);

    for (i=0; i++; i<1000000) {
    	j=i;
    }

    val0 = Xil_In32 (R0);
    val1 = Xil_In32 (R1);
    val2 = Xil_In32 (R2);
    val3 = Xil_In32 (R3);
    print("Checkpoint 1\n\r");

    Xil_Out32(CMD, 0x00000002);

    for (i=0; i++; i<1000000) {
    	j=i;
    }

    print("Checkpoint 2\n\r");
    val0 = Xil_In32 (R0);
    val1 = Xil_In32 (R1);
    val2 = Xil_In32 (R2);
    val3 = Xil_In32 (R3);

    print("Checkpoint 3\n\r");


    print("END\n\r");




    return 0;
}
